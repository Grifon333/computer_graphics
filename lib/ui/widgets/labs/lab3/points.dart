abstract class Points {
  static List<List<List<double>>> wheels() {
    const List<List<double>> centers = [
      [-19, -7, 16],
      [17, -7, 16],
      [-19, -7, -16],
      [17, -7, -16],
      [-19, -7, 12],
      [17, -7, 12],
      [-19, -7, -12],
      [17, -7, -12],
    ];
    const List<List<List<double>>> sides = [
      [
        [-23, -6],
        [-22, -4],
        [-20, -3],
        [-18, -3],
        [-16, -4],
        [-15, -6],
        [-15, -8],
        [-16, -10],
        [-18, -11],
        [-20, -11],
        [-22, -10],
        [-23, -8],
      ],
      [
        [13, -6],
        [14, -4],
        [16, -3],
        [18, -3],
        [20, -4],
        [21, -6],
        [21, -8],
        [20, -10],
        [18, -11],
        [16, -11],
        [14, -10],
        [13, -8],
      ]
    ];
    List<List<List<double>>> result = [];
    for (int k = 0; k < centers.length; k++) {
      for (int i = 0; i < sides[k % 2].length - 1; i++) {
        result.add([
          [sides[k % 2][i][0], sides[k % 2][i][1], centers[k][2]],
          [sides[k % 2][i + 1][0], sides[k % 2][i + 1][1], centers[k][2]],
          centers[k]
        ]);
      }
      result.add([
        [sides[k % 2].first[0], sides[k % 2].first[1], centers[k][2]],
        [sides[k % 2].last[0], sides[k % 2].last[1], centers[k][2]],
        centers[k]
      ]);
    }

    for (int k = 0; k < centers.length / 2; k++) {
      for (int i = 0; i < sides[k % 2].length - 1; i++) {
        result.add([
          [sides[k % 2][i][0], sides[k % 2][i][1], centers[k][2]],
          [sides[k % 2][i][0], sides[k % 2][i][1], centers[k + 4][2]],
          [sides[k % 2][i + 1][0], sides[k % 2][i + 1][1], centers[k + 4][2]],
        ]);
        result.add([
          [sides[k % 2][i][0], sides[k % 2][i][1], centers[k][2]],
          [sides[k % 2][i + 1][0], sides[k % 2][i + 1][1], centers[k + 4][2]],
          [sides[k % 2][i + 1][0], sides[k % 2][i + 1][1], centers[k][2]],
        ]);
      }
    }

    return result;
  }

  static List<List<List<double>>> body() {
    const List<double> width = [16, -16];
    List<List<List<double>>> points = [
      [
        [-25, -9],
        [-25, -10],
        [-26, -9]
      ],
      [
        [-23, -6],
        [-23, -10],
        [-25, -10]
      ],
      [
        [-25, -6],
        [-23, -6],
        [-25, -10]
      ],
      [
        [-26, -5],
        [-23, -6],
        [-25, -6]
      ],
      [
        [-26, -3],
        [-23, -6],
        [-26, -5],
      ],
      [
        [-26, -3],
        [-22, -4],
        [-23, -6]
      ],
      [
        [-26, -3],
        [-22, -4],
        [-24, -1]
      ],
      [
        [-22, -4],
        [-24, -1],
        [-22, 0]
      ],
      [
        [-22, -4],
        [-22, 0],
        [-20, -3]
      ],
      [
        [-22, 0],
        [-20, -3],
        [-19, 0]
      ],
      [
        [-20, -3],
        [-19, 0],
        [-18, -3]
      ],
      [
        [-19, 0],
        [-18, -3],
        [-16, 0],
      ],
      [
        [-18, -3],
        [-16, 0],
        [-16, -4]
      ],
      [
        [-16, 0],
        [-16, -4],
        [-13, 0]
      ],
      [
        [-16, -4],
        [-13, 0],
        [-15, -6]
      ],
      [
        [-13, 0],
        [-15, -6],
        [3, 0]
      ],
      [
        [-15, -6],
        [3, 0],
        [13, -10]
      ],
      [
        [13, -10],
        [-15, -6],
        [-15, -10]
      ],
      [
        [13, -10],
        [3, 0],
        [13, -6]
      ],
      [
        [3, 0],
        [13, -6],
        [14, -4]
      ],
      [
        [3, 0],
        [14, -4],
        [16, -3]
      ],
      [
        [3, 0],
        [16, -3],
        [16, 2]
      ],
      [
        [16, -3],
        [16, 2],
        [18, -3]
      ],
      [
        [16, 2],
        [18, -3],
        [26, 2]
      ],
      [
        [18, -3],
        [26, 2],
        [26, -2]
      ],
      [
        [18, -3],
        [26, -2],
        [20, -4]
      ],
      [
        [26, -2],
        [20, -4],
        [27, -4]
      ],
      [
        [20, -4],
        [27, -4],
        [21, -6]
      ],
      [
        [27, -4],
        [21, -6],
        [27, -8]
      ],
      [
        [21, -6],
        [27, -8],
        [24, -10]
      ],
      [
        [21, -6],
        [24, -10],
        [21, -10]
      ]
    ];

    for (int i = 0; i < points.length; i++) {
      for (int j = 0; j < points[i].length; j++) {
        points[i][j].add(width[0]);
      }
    }

    List<List<List<double>>> result = List.generate(
      points.length * 2,
      (index) => List.generate(3, (_) => List.filled(3, 0)),
    );
    for (int i = 0; i < points.length; i++) {
      for (int j = 0; j < points[i].length; j++) {
        result[i][j][0] = points[i][j][0];
        result[i][j][1] = points[i][j][1];
        result[i][j][2] = width[0];

        result[i + points.length][j][0] = points[i][j][0];
        result[i + points.length][j][1] = points[i][j][1];
        result[i + points.length][j][2] = width[1];
      }
    }

    return result;
  }

  static const List<List<List<double>>> front = [
    [
      [-26, -3, 16],
      [-26, -5, 16],
      [-27, -5, 15]
    ],
    [
      [-26, -3, 16],
      [-27, -5, 15],
      [-27, -3, 15]
    ],
    [
      [-27, -5, 15],
      [-27, -3, 15],
      [-28, -5, 12]
    ],
    [
      [-27, -3, 15],
      [-28, -5, 12],
      [-28, -3, 12]
    ],
    [
      [-28, -5, 12],
      [-28, -3, 12],
      [-29, -5, 8]
    ],
    [
      [-28, -3, 12],
      [-29, -5, 8],
      [-29, -3, 8]
    ],
    [
      [-26, -5, 16],
      [-25, -6, 16],
      [-26, -6, 15]
    ],
    [
      [-26, -5, 16],
      [-27, -5, 15],
      [-26, -6, 15]
    ],
    [
      [-27, -5, 15],
      [-26, -6, 15],
      [-27, -6, 12]
    ],
    [
      [-27, -5, 15],
      [-27, -6, 12],
      [-28, -5, 12]
    ],
    [
      [-28, -5, 12],
      [-27, -6, 12],
      [-28, -6, 8],
    ],
    [
      [-28, -5, 12],
      [-28, -6, 8],
      [-29, -5, 8]
    ],
    [
      [-26, -9, 16],
      [-25, -10, 16],
      [-26, -10, 15]
    ],
    [
      [-26, -9, 16],
      [-26, -10, 15],
      [-27, -9, 15]
    ],
    [
      [-27, -9, 15],
      [-26, -10, 15],
      [-27, -10, 12]
    ],
    [
      [-27, -9, 15],
      [-27, -10, 12],
      [-28, -9, 12]
    ],
    [
      [-28, -9, 12],
      [-27, -10, 12],
      [-28, -10, 8]
    ],
    [
      [-28, -9, 12],
      [-28, -10, 8],
      [-29, -9, 8]
    ],
    //-----------------------
    [
      [-26, -3, -16],
      [-26, -5, -16],
      [-27, -5, -15]
    ],
    [
      [-26, -3, -16],
      [-27, -5, -15],
      [-27, -3, -15]
    ],
    [
      [-27, -5, -15],
      [-27, -3, -15],
      [-28, -5, -12]
    ],
    [
      [-27, -3, -15],
      [-28, -5, -12],
      [-28, -3, -12]
    ],
    [
      [-28, -5, -12],
      [-28, -3, -12],
      [-29, -5, -8]
    ],
    [
      [-28, -3, -12],
      [-29, -5, -8],
      [-29, -3, -8]
    ],
    [
      [-26, -5, -16],
      [-25, -6, -16],
      [-26, -6, -15]
    ],
    [
      [-26, -5, -16],
      [-27, -5, -15],
      [-26, -6, -15]
    ],
    [
      [-27, -5, -15],
      [-26, -6, -15],
      [-27, -6, -12]
    ],
    [
      [-27, -5, -15],
      [-27, -6, -12],
      [-28, -5, -12]
    ],
    [
      [-28, -5, -12],
      [-27, -6, -12],
      [-28, -6, -8],
    ],
    [
      [-28, -5, -12],
      [-28, -6, -8],
      [-29, -5, -8]
    ],
    [
      [-26, -9, -16],
      [-25, -10, -16],
      [-26, -10, -15]
    ],
    [
      [-26, -9, -16],
      [-26, -10, -15],
      [-27, -9, -15]
    ],
    [
      [-27, -9, -15],
      [-26, -10, -15],
      [-27, -10, -12]
    ],
    [
      [-27, -9, -15],
      [-27, -10, -12],
      [-28, -9, -12]
    ],
    [
      [-28, -9, -12],
      [-27, -10, -12],
      [-28, -10, -8]
    ],
    [
      [-28, -9, -12],
      [-28, -10, -8],
      [-29, -9, -8]
    ],
    //----------------------------
    [
      [-29, -2, 8],
      [-29, -5, 8],
      [-29, -5, -8]
    ],
    [
      [-29, -2, 8],
      [-29, -5, -8],
      [-29, -2, -8]
    ],
    [
      [-29, -5, 8],
      [-28, -6, 8],
      [-28, -6, -8]
    ],
    [
      [-29, -5, 8],
      [-28, -6, -8],
      [-29, -5, -8]
    ],
    [
      [-28, -6, 8],
      [-28, -7, 7],
      [-28, -7, -7]
    ],
    [
      [-28, -6, 8],
      [-28, -7, -7],
      [-28, -6, -8]
    ],
    [
      [-29, -9, 8],
      [-28, -10, 8],
      [-28, -10, -8]
    ],
    [
      [-29, -9, 8],
      [-28, -10, -8],
      [-29, -9, -8]
    ]
  ];

  static const List<List<List<double>>> frontBumper = [
    [
      [-25, -6, 16],
      [-25, -9, 16],
      [-26, -9, 15]
    ],
    [
      [-25, -6, 16],
      [-26, -9, 15],
      [-26, -6, 15]
    ],
    [
      [-26, -6, 15],
      [-26, -9, 15],
      [-27, -9, 12]
    ],
    [
      [-26, -6, 15],
      [-27, -9, 12],
      [-27, -6, 12]
    ],
    [
      [-27, -6, 12],
      [-27, -9, 12],
      [-28, -9, 8]
    ],
    [
      [-27, -6, 12],
      [-28, -9, 8],
      [-28, -6, 8]
    ],
    [
      [-28, -6, 8],
      [-28, -7, 8],
      [-28, -7, 7]
    ],
    //---
    [
      [-25, -9, 16],
      [-26, -9, 16],
      [-27, -9, 15]
    ],
    [
      [-25, -9, 16],
      [-27, -9, 15],
      [-26, -9, 15]
    ],
    [
      [-26, -9, 15],
      [-27, -9, 15],
      [-28, -9, 12]
    ],
    [
      [-26, -9, 15],
      [-28, -9, 12],
      [-27, -9, 12]
    ],
    [
      [-27, -9, 12],
      [-28, -9, 12],
      [-29, -9, 8]
    ],
    [
      [-27, -9, 12],
      [-29, -9, 8],
      [-28, -9, 8]
    ],
    //-----------------------------
    [
      [-25, -6, -16],
      [-25, -9, -16],
      [-26, -9, -15]
    ],
    [
      [-25, -6, -16],
      [-26, -9, -15],
      [-26, -6, -15]
    ],
    [
      [-26, -6, -15],
      [-26, -9, -15],
      [-27, -9, -12]
    ],
    [
      [-26, -6, -15],
      [-27, -9, -12],
      [-27, -6, -12]
    ],
    [
      [-27, -6, -12],
      [-27, -9, -12],
      [-28, -9, -8]
    ],
    [
      [-27, -6, -12],
      [-28, -9, -8],
      [-28, -6, -8]
    ],
    [
      [-28, -6, -8],
      [-28, -7, -8],
      [-28, -7, -7]
    ],
    [
      [-25, -9, -16],
      [-26, -9, -16],
      [-27, -9, -15]
    ],
    [
      [-25, -9, -16],
      [-27, -9, -15],
      [-26, -9, -15]
    ],
    [
      [-26, -9, -15],
      [-27, -9, -15],
      [-28, -9, -12]
    ],
    [
      [-26, -9, -15],
      [-28, -9, -12],
      [-27, -9, -12]
    ],
    [
      [-27, -9, -12],
      [-28, -9, -12],
      [-29, -9, -8]
    ],
    [
      [-27, -9, -12],
      [-29, -9, -8],
      [-28, -9, -8]
    ],
    //-----------------------------
    [
      [-28, -7, 8],
      [-28, -9, 8],
      [-28, -9, -8]
    ],
    [
      [-28, -7, 8],
      [-28, -9, -8],
      [-28, -7, -8]
    ],
    [
      [-28, -9, 8],
      [-29, -9, 8],
      [-29, -9, -8]
    ],
    [
      [-28, -9, 8],
      [-29, -9, -8],
      [-28, -9, -8]
    ]
  ];
}
